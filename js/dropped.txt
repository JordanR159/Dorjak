	for(var i = 1; i < 11; i++)
	{
		var planetCircleDef = new b2CircleDef();
		var info = new b2Vec3();
		switch(i) {
			case 1: planetCircleDef.radius = baseRad*3;
			break;
			case 2:planetCircleDef.radius = baseRad*2.25;
			break;
			case 3:planetCircleDef.radius = baseRad*1.5;
			break;
			case 4:planetCircleDef.radius = baseRad;
			break;
			case 7:planetCircleDef.radius = baseRad;
			break;
			case 8:planetCircleDef.radius = baseRad*1.5;
			break;
			case 9:planetCircleDef.radius = baseRad*2.25;
			break;
			case 10:planetCircleDef.radius = baseRad*3;
			default:
		}
		info.rad = planetBody.radius;
		var planetB = new b2BodyDef();
		planetB.addShape(planetCircleDef);
		planetB.position.x = screenWidth/2;
		planetB.position.y = screenHeight*i/11;
		planetB.distanceFromSun = Math.abs(planetB.position.y - sun.position.y);
		switch(i) {
			case 1:
				planetB.angleFromSun = Math.PI/2;			
				planetB.baseVelocity = baseVel/2;
				planetB.linearVelocity.x = baseVel/2;
				planetB.linearVelocity.y = 0;
			break;
			case 2:
				planetB.angleFromSun = Math.PI/2;
				planetB.baseVelocity = baseVel/1.7;
				planetB.linearVelocity.x = baseVel/1.7;
				planetB.linearVelocity.y = 0;
			break;
			case 3:
				planetB.angleFromSun = Math.PI/2;
				planetB.baseVelocity = -baseVel/1.4;
				planetB.linearVelocity.x = -baseVel/1.4;
				planetB.linearVelocity.y = 0;
			break;
			case 4:
				planetB.angleFromSun = Math.PI/2;
				planetB.baseVelocity = baseVel;
				planetB.linearVelocity.Set(baseVel, 0);
			break;
			case 7:
				planetB.angleFromSun = Math.PI*3/2;
				planetB.baseVelocity = baseVel;
				planetB.linearVelocity.Set(baseVel, 0);
			break;
			case 8:
				planetB.angleFromSun = Math.PI*3/2;
				planetB.baseVelocity = -baseVel/1.4;
				planetB.linearVelocity.Set(-baseVel/1.4, 0);
			break;
			case 9:
				planetB.angleFromSun = Math.PI*3/2;
				planetB.baseVelocity = baseVel/1.7;
				planetB.linearVelocity.Set(baseVel/1.7, 0);
			break;
			case 10:
				planetB.angleFromSun = Math.PI*3/2;
				planetB.baseVelocity = baseVel/2;
				planetB.linearVelocity.Set(baseVel/2, 0);
			default:
		}
		var planetBody = world.CreateBody(planetB);
		info.angle = planetB.angleFromSun;
		info.dist = planetB.distanceFromSun;
		planets.push(planetBody);	
		data.push(info);
		if(i == 4)
		{
			i+= 2;
		}
	}