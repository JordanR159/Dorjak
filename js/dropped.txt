	for(var i = 1; i < 11; i++)
	{
		var planetCircleDef = new b2CircleDef();
		var info = new b2Vec3();
		switch(i) {
			case 1: planetCircleDef.radius = baseRad*3;
			break;
			case 2:planetCircleDef.radius = baseRad*2.25;
			break;
			case 3:planetCircleDef.radius = baseRad*1.5;
			break;
			case 4:planetCircleDef.radius = baseRad;
			break;
			case 7:planetCircleDef.radius = baseRad;
			break;
			case 8:planetCircleDef.radius = baseRad*1.5;
			break;
			case 9:planetCircleDef.radius = baseRad*2.25;
			break;
			case 10:planetCircleDef.radius = baseRad*3;
			default:
		}
		info.rad = planetBody.radius;
		var planetB = new b2BodyDef();
		planetB.addShape(planetCircleDef);
		planetB.position.x = screenWidth/2;
		planetB.position.y = screenHeight*i/11;
		planetB.distanceFromSun = Math.abs(planetB.position.y - sun.position.y);
		switch(i) {
			case 1:
				planetB.angleFromSun = Math.PI/2;			
				planetB.baseVelocity = baseVel/2;
				planetB.linearVelocity.x = baseVel/2;
				planetB.linearVelocity.y = 0;
			break;
			case 2:
				planetB.angleFromSun = Math.PI/2;
				planetB.baseVelocity = baseVel/1.7;
				planetB.linearVelocity.x = baseVel/1.7;
				planetB.linearVelocity.y = 0;
			break;
			case 3:
				planetB.angleFromSun = Math.PI/2;
				planetB.baseVelocity = -baseVel/1.4;
				planetB.linearVelocity.x = -baseVel/1.4;
				planetB.linearVelocity.y = 0;
			break;
			case 4:
				planetB.angleFromSun = Math.PI/2;
				planetB.baseVelocity = baseVel;
				planetB.linearVelocity.Set(baseVel, 0);
			break;
			case 7:
				planetB.angleFromSun = Math.PI*3/2;
				planetB.baseVelocity = baseVel;
				planetB.linearVelocity.Set(baseVel, 0);
			break;
			case 8:
				planetB.angleFromSun = Math.PI*3/2;
				planetB.baseVelocity = -baseVel/1.4;
				planetB.linearVelocity.Set(-baseVel/1.4, 0);
			break;
			case 9:
				planetB.angleFromSun = Math.PI*3/2;
				planetB.baseVelocity = baseVel/1.7;
				planetB.linearVelocity.Set(baseVel/1.7, 0);
			break;
			case 10:
				planetB.angleFromSun = Math.PI*3/2;
				planetB.baseVelocity = baseVel/2;
				planetB.linearVelocity.Set(baseVel/2, 0);
			default:
		}
		var planetBody = world.CreateBody(planetB);
		info.angle = planetB.angleFromSun;
		info.dist = planetB.distanceFromSun;
		planets.push(planetBody);	
		data.push(info);
		if(i == 4)
		{
			i+= 2;
		}
	}

	listener.BeginContact = function(contact) 
	{
		var fixtureA = contact.GetFixtureA();
		var fixtureB = contact.GetFixtureB();
		//asteroid collides with asteroid
		if(fixtureA.GetBody().GetUserData() instanceof Asteroid && fixtureB.GetBody().GetUserData() instanceof Asteroid)
		{
			console.log("asteroid-asteroid!");
			var asteroid = asteroids[asteroids.indexOf(fixtureA.GetBody().GetUserData())];
			console.log("Index fixA "+ asteroids.indexOf(fixtureA.GetBody().GetUserData()));
			console.log("Index fixB "+ asteroids.indexOf(fixtureB.GetBody().GetUserData()));
			if(asteroid.fixtureDef.shape.GetRadius() >= 75)
			{
				explode(asteroid);
			}
			
			destroyList.push(asteroid.body);
			asteroids.splice(asteroids.indexOf(fixtureA.GetBody().GetUserData()), 1);
			//asteroidFixtures.splice(fixtureA, 1);
			
			asteroid = asteroids[asteroids.indexOf(fixtureB.GetBody().GetUserData())];
			if(asteroid.fixtureDef.shape.GetRadius() >= 75)
			{
				explode(asteroid);
			}
			
			destroyList.push(asteroid.body);
			asteroids.splice(asteroids.indexOf(fixtureB.GetBody().GetUserData()), 1);
			//asteroidFixtures.splice(fixtureB, 1);
			
			if(score == 0) score++;
		}
		//asteroid collides with planet
		else if((fixtureA.GetBody().GetUserData() instanceof Asteroid && fixtureB.GetBody().GetUserData() instanceof Planet) ||
		   (fixtureB.GetBody().GetUserData() instanceof Asteroid && fixtureA.GetBody().GetUserData() instanceof Planet)) 
		{
			console.log("asteroid-planet!");
			var asteroid; 
			var index;
			if(fixtureA.GetBody().GetUserData() instanceof Asteroid) 
			{
				asteroid = asteroids[asteroids.indexOf(fixtureA.GetBody().GetUserData())];
				index = asteroids.indexOf(fixtureA.GetBody().GetUserData());
				console.log("Index" + index);
			}
			else 
			{
				asteroid = asteroids[asteroids.indexOf(fixtureB.GetBody().GetUserData())];
				index = asteroids.indexOf(fixtureB.GetBody().GetUserData());
				console.log("Index" + index);
			}
			
			if(asteroid.fixtureDef.shape.GetRadius() >= 75) 
			{
				explode(asteroid);
			}
			
			score++;
			destroyList.push(asteroid.body);
			asteroids.splice(index, 1);
			//asteroidFixtures.splice(asteroid.fixtureDef, 1);
		}
		//asteroid collides with sun
		else/*((fixtureA.GetBody().GetUserData() instanceof Asteroid  && fixtureB.GetBody().GetUserData() instanceof Sun) ||
		   (fixtureB.GetBody().GetUserData() instanceof Asteroid && fixtureA.GetBody().GetUserData() instanceof Sun))*/ 
		{ 
		   console.log("asteroid-sun!");
		   self.postMessage({gameStatus : 'gameover', score: score});
		   clearInterval(interval);
		   self.close();
		}
		//debris collides with debris
		/*if(debrisFixtures.indexOf(fixtureA) != -1 && debrisFixtures.indexOf(fixtureB) != -1) {
			destroyList.push(debris[debrisFixtures.indexOf(fixtureA)].body);
			destroyList.push(debris[debrisFixtures.indexOf(fixtureB)].body);
			destroyData.push({id: debrisFixtures[debrisFixtures.indexOf(fixtureA)].id});
			destroyData.push({id: debrisFixtures[debrisFixtures.indexOf(fixtureB)].id});
			debris.splice(debrisFixtures.indexOf(fixtureA), 1);
			debris.splice(debrisFixtures.indexOf(fixtureB), 1);
			asteroidFixtures.splice(asteroid1, 1);
			asteroidFixtures.splice(debrisFixtures.indexOf(fixtureB), 1);
		}
		//debris collides with asteroid, possibly implement destroying asteroids
		if((debrisFixtures.indexOf(fixtureA) != -1 && asteroidFixtures.indexOf(fixtureB)) != -1 ||
		   (debrisFixtures.indexOf(fixtureB) != -1 && asteroidFixtures.indexOf(fixtureA)) != -1) {
		   var debrisIndex;
		   if(asteroidFixtures.indexOf(fixtureA) == -1) {
				debrisIndex = debrisFixtures.indexOf(fixtureA);
			}
			else {
				debrisIndex = debrisFixtures.indexOf(fixtureB);
			}
			destroyList.push(debris[debrisIndex].body);
			destroyData.push({id: debrisFixtures[debrisIndex]});
			debris.splice(debrisIndex, 1);
			debrisFixtures.splice(debrisIndex, 1);
		}
		//debris collides with planet or sun 
		if((debrisFixtures.indexOf(fixtureA) != -1 && (planetsFixtures.indexOf(fixtureB) != -1 || sunObject.fixtureDef == fixtureB)) ||
			(debrisFixtures.indexOf(fixtureB) != -1 && (planetsFixtures.indexOf(fixtureA) != -1 || sunObject.fixtureDef == fixtureA))) {
			var debrisIndex;
			if(debrisFixtures.indexOf(fixtureA) != -1) debrisIndex = debrisFixtures.indexOf(fixtureA);
			else debrisIndex = debrisFixtures.indexOf(fixtureA);
			destroyList.push(debris[debrisIndex].body);
			destroyData.push({id: debrisFixtures[debrisIndex]});
			debris.splice(debrisIndex, 1);
			debrisFixtures.splice(debrisIndex, 1);
		}*/
	}
	world.SetContactListener(listener);